<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Dashboard - City Services</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            min-height: 100vh;
            padding: 20px;
            color: white;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        h1 {
            color: white;
            font-size: 2em;
        }
        .nav-links a {
            color: #3498db;
            text-decoration: none;
            margin-left: 20px;
            padding: 8px 16px;
            border-radius: 5px;
            background: rgba(52, 152, 219, 0.1);
            transition: background 0.3s;
        }
        .nav-links a:hover {
            background: rgba(52, 152, 219, 0.2);
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            backdrop-filter: blur(10px);
        }
        .card h2 {
            margin-bottom: 15px;
            color: #ecf0f1;
        }
        .message-stream {
            height: 400px;
            overflow-y: auto;
            background: #1a1a1a;
            border-radius: 5px;
            padding: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        .message-item {
            margin-bottom: 8px;
            padding: 5px;
            border-left: 3px solid #3498db;
            background: rgba(52, 152, 219, 0.1);
        }
        .message-item .timestamp {
            color: #95a5a6;
            font-size: 10px;
        }
        .message-item .channel {
            color: #e74c3c;
            font-weight: bold;
        }
        .service-status {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }
        .status-card {
            background: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #27ae60;
        }
        .status-card.offline {
            border-left-color: #e74c3c;
        }
        .status-card h3 {
            font-size: 14px;
            margin-bottom: 5px;
        }
        .status-card .uptime {
            font-size: 12px;
            color: #95a5a6;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .metric-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #3498db;
        }
        .metric-label {
            font-size: 12px;
            color: #95a5a6;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üèôÔ∏è City Services Dashboard</h1>
        <div class="nav-links">
            <a href="/">Service Launcher</a>
            <a href="/analytics">Analytics</a>
            <a href="/citizen">Citizen Portal</a>
        </div>
    </div>

    <div class="dashboard-grid">
        <div class="card">
            <h2>üì° Live Message Stream</h2>
            <div id="message-stream" class="message-stream">
                <div style="color: #95a5a6; text-align: center; margin-top: 50px;">
                    Connecting to message stream...
                </div>
            </div>
        </div>

        <div class="card">
            <h2>üîß Service Status</h2>
            <div id="service-status" class="service-status">
                <!-- Services will be populated here -->
            </div>
        </div>
    </div>

    <div class="metrics-grid">
        <div class="metric-card">
            <div id="running-services" class="metric-value">0</div>
            <div class="metric-label">Running Services</div>
        </div>
        <div class="metric-card">
            <div id="total-messages" class="metric-value">0</div>
            <div class="metric-label">Messages Today</div>
        </div>
        <div class="metric-card">
            <div id="avg-uptime" class="metric-value">0h</div>
            <div class="metric-label">Avg Uptime</div>
        </div>
        <div class="metric-card">
            <div id="active-incidents" class="metric-value">0</div>
            <div class="metric-label">Active Incidents</div>
        </div>
    </div>

    <script>
        let messageCount = 0;

        // Connect to message stream
        const eventSource = new EventSource('/messages/stream');
        const messageStream = document.getElementById('message-stream');

        eventSource.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                addMessage(data);
                messageCount++;
                updateMetrics();
            } catch (e) {
                console.error('Error parsing message:', e);
            }
        };

        function addMessage(data) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message-item';

            const timestamp = new Date(data.timestamp * 1000).toLocaleTimeString();
            const channel = data.channel || 'unknown';
            const content = JSON.stringify(data.message, null, 2);

            messageDiv.innerHTML = `
                <div class="timestamp">${timestamp}</div>
                <div class="channel">${channel}</div>
                <div>${content}</div>
            `;

            messageStream.insertBefore(messageDiv, messageStream.firstChild);

            // Keep only last 50 messages
            while (messageStream.children.length > 50) {
                messageStream.removeChild(messageStream.lastChild);
            }
        }

        function updateServiceStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    const statusContainer = document.getElementById('service-status');
                    statusContainer.innerHTML = '';

                    Object.keys(data).forEach(serviceName => {
                        const service = data[serviceName];
                        const serviceDiv = document.createElement('div');
                        serviceDiv.className = `status-card ${service.running ? '' : 'offline'}`;

                        const uptime = service.running ?
                            Math.floor(service.uptime / 3600) + 'h ' + Math.floor((service.uptime % 3600) / 60) + 'm' :
                            'Offline';

                        serviceDiv.innerHTML = `
                            <h3>${serviceName.replace(/_/g, ' ')}</h3>
                            <div class="uptime">${uptime}</div>
                        `;

                        statusContainer.appendChild(serviceDiv);
                    });

                    updateMetrics();
                });
        }

        function updateMetrics() {
            fetch('/metrics')
                .then(response => response.json())
                .then(data => {
                    const runningServices = Object.keys(data).length;
                    const totalMessages = Object.values(data).reduce((sum, service) => sum + (service.message_count || 0), 0);
                    const avgUptime = runningServices > 0 ?
                        Object.values(data).reduce((sum, service) => sum + service.uptime, 0) / runningServices / 3600 : 0;

                    document.getElementById('running-services').textContent = runningServices;
                    document.getElementById('total-messages').textContent = totalMessages + messageCount;
                    document.getElementById('avg-uptime').textContent = Math.floor(avgUptime) + 'h';
                    document.getElementById('active-incidents').textContent = Math.floor(Math.random() * 5); // Simulated
                });
        }

        // Update every 5 seconds
        setInterval(updateServiceStatus, 5000);
        updateServiceStatus();

        // Load recent messages on page load
        fetch('/messages/recent')
            .then(response => response.json())
            .then(messages => {
                messageStream.innerHTML = '';
                messages.reverse().forEach(addMessage);
            });
    </script>
</body>
</html>
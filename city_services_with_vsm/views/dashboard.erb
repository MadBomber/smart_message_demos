<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Dashboard - City Services</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            min-height: 100vh;
            padding: 20px;
            color: white;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        h1 {
            color: white;
            font-size: 2em;
        }
        .nav-links a {
            color: #3498db;
            text-decoration: none;
            margin-left: 20px;
            padding: 8px 16px;
            border-radius: 5px;
            background: rgba(52, 152, 219, 0.1);
            transition: background 0.3s;
        }
        .nav-links a:hover {
            background: rgba(52, 152, 219, 0.2);
        }
        .nav-links a.active {
            background: rgba(52, 152, 219, 0.3);
            font-weight: bold;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        @media (max-width: 1024px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            backdrop-filter: blur(10px);
        }
        .card h2 {
            margin-bottom: 15px;
            color: #ecf0f1;
        }
        .message-stream {
            height: 500px;
            overflow-y: auto;
            background: #1a1a1a;
            border-radius: 5px;
            padding: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        .message-item {
            margin-bottom: 8px;
            padding: 8px;
            border-left: 3px solid #3498db;
            background: rgba(52, 152, 219, 0.1);
            border-radius: 3px;
        }
        .message-item.emergency {
            border-left-color: #e74c3c;
            background: rgba(231, 76, 60, 0.1);
        }
        .message-item.health {
            border-left-color: #2ecc71;
            background: rgba(46, 204, 113, 0.1);
        }
        .message-item .timestamp {
            color: #95a5a6;
            font-size: 10px;
        }
        .message-item .channel {
            color: #e74c3c;
            font-weight: bold;
        }
        .message-item .from-to {
            color: #3498db;
            font-size: 11px;
            margin-top: 4px;
        }
        .service-status {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
        }
        .status-card {
            background: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #27ae60;
            transition: all 0.3s;
        }
        .status-card:hover {
            background: rgba(255, 255, 255, 0.08);
        }
        .status-card.offline {
            border-left-color: #e74c3c;
            opacity: 0.6;
        }
        .status-card h3 {
            font-size: 14px;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .status-card .emoji {
            font-size: 18px;
        }
        .status-card .uptime {
            font-size: 12px;
            color: #95a5a6;
        }
        .status-card .metrics {
            display: flex;
            gap: 15px;
            margin-top: 8px;
            font-size: 11px;
            color: #bdc3c7;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .metric-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #3498db;
        }
        .metric-label {
            font-size: 12px;
            color: #95a5a6;
            margin-top: 5px;
        }
        .no-messages {
            color: #95a5a6;
            text-align: center;
            padding: 20px;
            font-style: italic;
        }
        .network-link-card {
            background: linear-gradient(135deg, rgba(52, 152, 219, 0.2), rgba(155, 89, 182, 0.2));
            border: 2px solid rgba(52, 152, 219, 0.3);
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        .network-link-card:hover {
            background: linear-gradient(135deg, rgba(52, 152, 219, 0.3), rgba(155, 89, 182, 0.3));
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        .network-link-card h2 {
            color: #3498db;
        }
        .network-link-card p {
            color: #bdc3c7;
            margin-top: 10px;
        }
        .network-link-card .icon {
            font-size: 48px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üèôÔ∏è City Services Dashboard</h1>
        <div class="nav-links">
            <a href="/">Service Launcher</a>
            <a href="/dashboard" class="active">Dashboard</a>
            <a href="/network">Network View</a>
            <a href="/analytics">Analytics</a>
            <a href="/citizen">Citizen Portal</a>
        </div>
    </div>

    <div class="metrics-grid">
        <div class="metric-card">
            <div class="metric-value" id="running-services">0</div>
            <div class="metric-label">Running Services</div>
        </div>
        <div class="metric-card">
            <div class="metric-value" id="total-messages">0</div>
            <div class="metric-label">Total Messages</div>
        </div>
        <div class="metric-card">
            <div class="metric-value" id="active-emergencies">0</div>
            <div class="metric-label">Active Emergencies</div>
        </div>
        <div class="metric-card">
            <div class="metric-value" id="system-uptime">0m</div>
            <div class="metric-label">System Uptime</div>
        </div>
    </div>

    <div class="dashboard-grid">
        <div class="card">
            <h2>üì° Live Message Stream</h2>
            <div id="message-stream" class="message-stream">
                <div class="no-messages">Waiting for messages...</div>
            </div>
        </div>

        <div>
            <div class="card network-link-card" onclick="window.location.href='/network'">
                <h2>Network Visualization</h2>
                <div class="icon">üåê</div>
                <p>View real-time department network with animated message flows</p>
            </div>

            <div class="card" style="margin-top: 20px;">
                <h2>üè¢ Service Status</h2>
                <div id="service-status" class="service-status">
                    <div class="no-messages">Loading services...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let messageCount = 0;
        let startTime = Date.now();
        let activeEmergencies = new Set();

        // Department emoji mapping
        const departmentEmojis = {
            emergency_dispatch: 'üö®',
            police_department: 'üëÆ',
            fire_department: 'üöí',
            health_department: 'üè•',
            city_council: 'üèõÔ∏è',
            animal_control_department: 'üêï',
            parks_and_recreation_department: 'üå≥',
            public_works_department: 'üîß',
            transportation_department: 'üöå',
            utilities_department: 'üí°',
            redis_monitor: 'üìä',
            redis_stats: 'üìà',
            house: 'üè†',
            local_bank: 'üè¶',
            citizen: 'üë§'
        };

        function updateMetrics() {
            document.getElementById('total-messages').textContent = messageCount;
            document.getElementById('active-emergencies').textContent = activeEmergencies.size;

            const uptime = Math.floor((Date.now() - startTime) / 60000);
            document.getElementById('system-uptime').textContent = uptime < 60 ? `${uptime}m` : `${Math.floor(uptime/60)}h ${uptime%60}m`;
        }

        function updateServiceStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    const statusDiv = document.getElementById('service-status');
                    statusDiv.innerHTML = '';

                    let runningCount = 0;
                    Object.keys(data).forEach(service => {
                        if (data[service].running) runningCount++;

                        const card = document.createElement('div');
                        card.className = `status-card ${data[service].running ? '' : 'offline'}`;

                        const emoji = departmentEmojis[service] || 'üìç';
                        const uptime = data[service].uptime || 0;
                        const uptimeStr = uptime < 60 ? `${uptime}s` : `${Math.floor(uptime/60)}m`;

                        card.innerHTML = `
                            <h3><span class="emoji">${emoji}</span> ${data[service].display_name || service}</h3>
                            <div class="uptime">${data[service].running ? 'Running ‚Ä¢ ' + uptimeStr : 'Offline'}</div>
                            ${data[service].running ? `
                            <div class="metrics">
                                <span>Sent: ${data[service].messages_sent || 0}</span>
                                <span>Recv: ${data[service].messages_received || 0}</span>
                            </div>` : ''}
                        `;
                        statusDiv.appendChild(card);
                    });

                    document.getElementById('running-services').textContent = runningCount;
                });
        }

        function addMessage(data) {
            const stream = document.getElementById('message-stream');

            // Remove "waiting" message if present
            const noMessages = stream.querySelector('.no-messages');
            if (noMessages) noMessages.remove();

            const messageDiv = document.createElement('div');
            messageDiv.className = 'message-item';

            // Determine message type for styling
            if (data.channel && data.channel.includes('emergency')) {
                messageDiv.className += ' emergency';
                activeEmergencies.add(data.channel);
            }
            if (data.channel && data.channel.includes('health')) {
                messageDiv.className += ' health';
            }

            const time = new Date().toLocaleTimeString();

            // Try to extract from/to information
            let fromTo = '';
            if (data.message) {
                const fromMatch = data.message.match(/from:\s*(\S+)/);
                const toMatch = data.message.match(/to:\s*(\S+)/);
                if (fromMatch || toMatch) {
                    fromTo = `<div class="from-to">`;
                    if (fromMatch) fromTo += `From: ${fromMatch[1]} `;
                    if (toMatch) fromTo += `To: ${toMatch[1]}`;
                    fromTo += `</div>`;
                }
            }

            messageDiv.innerHTML = `
                <span class="timestamp">[${time}]</span>
                <span class="channel">${data.channel}</span>
                ${fromTo}
                <div>${data.message ? data.message.substring(0, 200) : ''}</div>
            `;

            stream.insertBefore(messageDiv, stream.firstChild);

            // Keep only last 50 messages
            while (stream.children.length > 50) {
                stream.removeChild(stream.lastChild);
            }

            messageCount++;
            updateMetrics();
        }

        // Connect to SSE for real-time messages
        const eventSource = new EventSource('/messages/stream');

        eventSource.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                addMessage(data);
            } catch (e) {
                console.error('Error parsing message:', e);
            }
        };

        eventSource.onerror = function() {
            console.error('SSE connection error');
        };

        // Update service status every 5 seconds
        setInterval(updateServiceStatus, 5000);
        updateServiceStatus();

        // Update metrics every second
        setInterval(updateMetrics, 1000);
        updateMetrics();
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>City Services Redis Message Monitor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            background-color: #1a1a1a;
            color: #e0e0e0;
            line-height: 1.4;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 300px;
            background-color: #2d2d2d;
            padding: 20px;
            overflow-y: auto;
            border-right: 2px solid #404040;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .header {
            background-color: #333;
            padding: 15px 20px;
            border-bottom: 2px solid #404040;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: #4a9eff;
            font-size: 20px;
        }

        .connection-status {
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
        }

        .connection-status.connected {
            background-color: #2d5a2d;
            color: #90ee90;
        }

        .connection-status.disconnected {
            background-color: #5a2d2d;
            color: #ff6b6b;
        }

        .filter-section {
            margin-bottom: 25px;
        }

        .filter-section h3 {
            color: #4a9eff;
            margin-bottom: 10px;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .filter-controls {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
        }

        .btn {
            padding: 4px 8px;
            font-size: 11px;
            background-color: #404040;
            color: #e0e0e0;
            border: 1px solid #555;
            cursor: pointer;
            border-radius: 3px;
            transition: background-color 0.2s;
        }

        .btn:hover {
            background-color: #505050;
        }

        .btn.select-all {
            background-color: #2d5a2d;
        }

        .btn.deselect-all {
            background-color: #5a2d2d;
        }

        .checkbox-group {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #404040;
            padding: 5px;
            background-color: #1a1a1a;
        }

        .checkbox-item {
            padding: 3px 5px;
            font-size: 12px;
            display: flex;
            align-items: center;
        }

        .checkbox-item:hover {
            background-color: #333;
        }

        .checkbox-item input[type="checkbox"] {
            margin-right: 8px;
        }

        .checkbox-item label {
            cursor: pointer;
            flex: 1;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: #1a1a1a;
        }

        .message {
            margin-bottom: 15px;
            padding: 10px;
            background-color: #2d2d2d;
            border-left: 3px solid #4a9eff;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .message:hover {
            background-color: #333;
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 12px;
        }

        .message-type {
            color: #4a9eff;
            font-weight: bold;
        }

        .message-route {
            color: #888;
        }

        .message-timestamp {
            color: #666;
            font-size: 11px;
        }

        .message-content {
            font-size: 12px;
            background-color: #1a1a1a;
            padding: 8px;
            border-radius: 3px;
            overflow-x: auto;
        }

        .json-key {
            color: #ff79c6;
        }

        .json-string {
            color: #50fa7b;
        }

        .json-number {
            color: #bd93f9;
        }

        .json-boolean {
            color: #ffb86c;
        }

        .json-null {
            color: #6272a4;
        }

        .stats-bar {
            background-color: #2d2d2d;
            padding: 10px 20px;
            border-top: 2px solid #404040;
            display: flex;
            gap: 20px;
            font-size: 12px;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .stat-label {
            color: #888;
        }

        .stat-value {
            color: #4a9eff;
            font-weight: bold;
        }

        .back-link {
            position: absolute;
            top: 15px;
            left: 20px;
            color: #4a9eff;
            text-decoration: none;
            font-size: 12px;
        }

        .back-link:hover {
            text-decoration: underline;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
        }

        .modal-content {
            background-color: #2d2d2d;
            margin: 2% auto;
            padding: 20px;
            border: 1px solid #404040;
            border-radius: 5px;
            width: 90%;
            max-width: 1000px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #404040;
        }

        .modal-title {
            color: #4a9eff;
            font-size: 18px;
            font-weight: bold;
        }

        .close-modal {
            color: #888;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 3px;
            transition: background-color 0.2s;
        }

        .close-modal:hover {
            background-color: #404040;
            color: #fff;
        }

        .modal-body {
            color: #e0e0e0;
        }

        .message-details {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 10px 15px;
            margin-bottom: 20px;
            padding: 15px;
            background-color: #1a1a1a;
            border-radius: 3px;
        }

        .detail-label {
            color: #888;
            font-weight: bold;
        }

        .detail-value {
            color: #e0e0e0;
        }

        .json-container {
            background-color: #1a1a1a;
            padding: 15px;
            border-radius: 3px;
            border: 1px solid #404040;
            overflow-x: auto;
        }

        .json-content {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.5;
            white-space: pre;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <a href="/" class="back-link">‚Üê Back to Launcher</a>

            <div class="filter-section" style="margin-top: 40px;">
                <h3>Message Types</h3>
                <div class="filter-controls">
                    <button class="btn select-all" onclick="selectAllMessageTypes()">All</button>
                    <button class="btn deselect-all" onclick="deselectAllMessageTypes()">None</button>
                </div>
                <div class="checkbox-group" id="message-types">
                    <% ServiceLauncher::MESSAGE_TYPES.each do |type| %>
                        <div class="checkbox-item">
                            <input type="checkbox" id="type-<%= type %>" value="<%= type %>" onchange="updateFilters()">
                            <label for="type-<%= type %>"><%= type %></label>
                        </div>
                    <% end %>
                </div>
            </div>

            <div class="filter-section">
                <h3>City Services</h3>
                <p style="font-size: 11px; color: #888; margin-bottom: 8px;">Shows messages both FROM and TO selected services</p>
                <div class="filter-controls">
                    <button class="btn select-all" onclick="selectAllServices()">All</button>
                    <button class="btn deselect-all" onclick="deselectAllServices()">None</button>
                </div>
                <div class="checkbox-group" id="services">
                    <% ServiceLauncher::CITY_SERVICES.each do |service| %>
                        <div class="checkbox-item">
                            <input type="checkbox" id="service-<%= service %>" value="<%= service %>" onchange="updateFilters()">
                            <label for="service-<%= service %>">
                                <% case service %>
                                <% when 'first-national-bank' %>
                                    Local Bank (First National)
                                <% when 'citizens' %>
                                    Citizens (All)
                                <% when 'houses' %>
                                    Houses (All)
                                <% when 'visitors' %>
                                    Visitors (All)
                                <% else %>
                                    <%= service %>
                                <% end %>
                            </label>
                        </div>
                    <% end %>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="header">
                <h1>Redis Message Monitor</h1>
                <div class="connection-status disconnected" id="connection-status">
                    Disconnected
                </div>
            </div>

            <div class="messages-container" id="messages-container">
                <div id="no-filters-message" style="text-align: center; color: #888; margin-top: 50px; padding: 20px;">
                    <p style="font-size: 16px; margin-bottom: 10px;">No filters selected</p>
                    <p style="font-size: 14px;">Please select message types and/or services from the sidebar to begin monitoring.</p>
                </div>
            </div>

            <div class="stats-bar">
                <div class="stat-item">
                    <span class="stat-label">Messages:</span>
                    <span class="stat-value" id="message-count">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Rate:</span>
                    <span class="stat-value" id="message-rate">0/min</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Buffer:</span>
                    <span class="stat-value" id="buffer-count">0/1000</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Message Detail Modal -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title" id="modalTitle">Message Details</div>
                <span class="close-modal" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="message-details" id="messageDetails">
                    <!-- Message metadata will be populated here -->
                </div>
                <div>
                    <h4 style="color: #4a9eff; margin-bottom: 10px;">Full Message Content:</h4>
                    <div class="json-container">
                        <div class="json-content" id="messageJson">
                            <!-- JSON content will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let eventSource = null;
        let messageCount = 0;
        let messageTimestamps = [];
        let messageBuffer = [];

        // Modal functions
        function showMessageModal(messageData) {
            const modal = document.getElementById('messageModal');
            const title = document.getElementById('modalTitle');
            const details = document.getElementById('messageDetails');
            const jsonContent = document.getElementById('messageJson');

            // Set modal title
            title.textContent = `${messageData.message_type} - ${formatTimestamp(messageData.timestamp)}`;

            // Populate message details
            const routeText = messageData.from && messageData.to ?
                `${messageData.from} ‚Üí ${messageData.to}` :
                messageData.channel || 'unknown';

            details.innerHTML = `
                <div class="detail-label">Message Type:</div>
                <div class="detail-value">${messageData.message_type || 'Unknown'}</div>
                <div class="detail-label">Route:</div>
                <div class="detail-value">${routeText}</div>
                <div class="detail-label">Channel:</div>
                <div class="detail-value">${messageData.channel || 'N/A'}</div>
                <div class="detail-label">Timestamp:</div>
                <div class="detail-value">${new Date(messageData.timestamp * 1000).toLocaleString()}</div>
                <div class="detail-label">From:</div>
                <div class="detail-value">${messageData.from || 'N/A'}</div>
                <div class="detail-label">To:</div>
                <div class="detail-value">${messageData.to || 'N/A'}</div>
            `;

            // Pretty print JSON content
            jsonContent.innerHTML = syntaxHighlightJSON(messageData.content);

            // Show modal
            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('messageModal').style.display = 'none';
        }

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('messageModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
            }
        });
        const MAX_DISPLAY_MESSAGES = 100;

        function selectAllMessageTypes() {
            document.querySelectorAll('#message-types input[type="checkbox"]').forEach(cb => {
                cb.checked = true;
            });
            updateFilters();
        }

        function deselectAllMessageTypes() {
            document.querySelectorAll('#message-types input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            updateFilters();
        }

        function selectAllServices() {
            document.querySelectorAll('#services input[type="checkbox"]').forEach(cb => {
                cb.checked = true;
            });
            updateFilters();
        }

        function deselectAllServices() {
            document.querySelectorAll('#services input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            updateFilters();
        }

        function updateFilters() {
            const messageTypes = [];
            document.querySelectorAll('#message-types input[type="checkbox"]:checked').forEach(cb => {
                messageTypes.push(cb.value);
            });

            const services = [];
            document.querySelectorAll('#services input[type="checkbox"]:checked').forEach(cb => {
                services.push(cb.value);
            });

            fetch('/api/filters', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message_types: messageTypes,
                    services: services
                })
            });

            // Check if we need to show/hide the no-filters message
            checkFilters();

            // Clear messages when filters change to empty
            if (messageTypes.length === 0 && services.length === 0) {
                const container = document.getElementById('messages-container');
                // Keep only the no-filters message
                container.innerHTML = `
                    <div id="no-filters-message" style="text-align: center; color: #888; margin-top: 50px; padding: 20px;">
                        <p style="font-size: 16px; margin-bottom: 10px;">No filters selected</p>
                        <p style="font-size: 14px;">Please select message types and/or services from the sidebar to begin monitoring.</p>
                    </div>
                `;
                messageCount = 0;
                messageTimestamps = [];
                document.getElementById('message-count').textContent = '0';
                document.getElementById('message-rate').textContent = '0/min';
            }
        }

        function syntaxHighlightJSON(json) {
            if (typeof json != 'string') {
                json = JSON.stringify(json, null, 2);
            }
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
                var cls = 'json-number';
                if (/^"/.test(match)) {
                    if (/:$/.test(match)) {
                        cls = 'json-key';
                    } else {
                        cls = 'json-string';
                    }
                } else if (/true|false/.test(match)) {
                    cls = 'json-boolean';
                } else if (/null/.test(match)) {
                    cls = 'json-null';
                }
                return '<span class="' + cls + '">' + match + '</span>';
            });
        }

        function formatTimestamp(timestamp) {
            const date = new Date(timestamp * 1000);
            return date.toLocaleTimeString();
        }

        function checkFilters() {
            const messageTypes = document.querySelectorAll('#message-types input[type="checkbox"]:checked').length;
            const services = document.querySelectorAll('#services input[type="checkbox"]:checked').length;
            const noFiltersMsg = document.getElementById('no-filters-message');

            if (messageTypes === 0 && services === 0 && noFiltersMsg) {
                // Show no filters message
                noFiltersMsg.style.display = 'block';
            } else if (noFiltersMsg) {
                // Hide no filters message
                noFiltersMsg.style.display = 'none';
            }
        }

        function displayMessage(data) {
            const container = document.getElementById('messages-container');
            const noFiltersMsg = document.getElementById('no-filters-message');

            // Remove no-filters message if present
            if (noFiltersMsg) {
                noFiltersMsg.style.display = 'none';
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';

            // Enhanced route display with direction indicators
            let routeText = '';
            if (data.from && data.to) {
                const selectedServices = Array.from(document.querySelectorAll('#services input[type="checkbox"]:checked'))
                    .map(cb => cb.value);

                // Check if this is from or to a selected service
                const isFromSelected = selectedServices.includes(data.from);
                const isToSelected = selectedServices.includes(data.to);

                if (isFromSelected && isToSelected) {
                    routeText = `${data.from} ‚Üí ${data.to} (internal)`;
                } else if (isFromSelected) {
                    routeText = `${data.from} ‚Üí ${data.to} (outgoing)`;
                } else if (isToSelected) {
                    routeText = `${data.from} ‚Üí ${data.to} (incoming)`;
                } else {
                    routeText = `${data.from} ‚Üí ${data.to}`;
                }
            } else {
                routeText = data.channel || 'unknown';
            }

            messageDiv.innerHTML = `
                <div class="message-header">
                    <span class="message-type">${data.message_type || 'Message'}</span>
                    <span class="message-route">${routeText}</span>
                    <span class="message-timestamp">${formatTimestamp(data.timestamp)}</span>
                </div>
                <div class="message-content">
                    ${syntaxHighlightJSON(data.content)}
                </div>
            `;

            // Store full message data and add click handler
            messageDiv.messageData = data;
            messageDiv.onclick = function() {
                showMessageModal(this.messageData);
            };

            // Add tooltip to indicate clickability
            messageDiv.title = "Click to view full message details";

            container.insertBefore(messageDiv, container.firstChild);

            // Keep only last N messages in display
            while (container.children.length > MAX_DISPLAY_MESSAGES) {
                container.removeChild(container.lastChild);
            }

            // Update stats
            messageCount++;
            document.getElementById('message-count').textContent = messageCount;

            // Track for rate calculation
            const now = Date.now();
            messageTimestamps.push(now);
            messageTimestamps = messageTimestamps.filter(t => t > now - 60000);
            document.getElementById('message-rate').textContent = messageTimestamps.length + '/min';
        }

        function connectToStream() {
            if (eventSource) {
                eventSource.close();
            }

            eventSource = new EventSource('/api/monitor/stream');

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (data.type === 'connected') {
                    document.getElementById('connection-status').textContent = 'Connected';
                    document.getElementById('connection-status').className = 'connection-status connected';
                } else if (data.type === 'message') {
                    displayMessage(data);
                    messageBuffer.push(data);
                    if (messageBuffer.length > 1000) {
                        messageBuffer.shift();
                    }
                    document.getElementById('buffer-count').textContent = `${messageBuffer.length}/1000`;
                }
            };

            eventSource.onerror = function() {
                document.getElementById('connection-status').textContent = 'Disconnected';
                document.getElementById('connection-status').className = 'connection-status disconnected';

                // Reconnect after 3 seconds
                setTimeout(connectToStream, 3000);
            };
        }

        // Don't load initial messages since no filters are selected by default
        // Just check the filter state on page load
        checkFilters();

        // Start connection
        connectToStream();

        // Update buffer count periodically
        setInterval(() => {
            document.getElementById('buffer-count').textContent = `${messageBuffer.length}/1000`;
        }, 1000);
    </script>
</body>
</html>